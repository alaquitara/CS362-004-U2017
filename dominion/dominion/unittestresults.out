
 *****TESTING handCard ***** 

 TESTING RETURN VALUE:

Return Value: 1, Expected: 1 

TESTING CARD VALUES

Original values     Copy Vaues
     4               4
     4               4
     4               4
     1               1
     4               4
TEST PASSED
hand count 5

 *****TESTING numHandCard ***** 

 TESTING RETURN VALUE:

Return Value: 5, Expected: 5 

 TESTING AFTER ADDING CARD:

Return Value: 6, Expected: 6 

 TESTING AFTER REMOVING CARD:

Return Value: 4, Expected: 4 

TEST SUCCESSFULLY COMPLETED

 *****TESTING shuffle() ***** 

 TESTING RETURN VALUE:

Return Value: 0, Expected: 0 


 TESTING DECK IS SHUFFLED:

VALUES BEFORE SHUFFLE:
1
4
4
4
4
VALUES AFTER SHUFFLE:
4
4
4
4
1
TEST SUCCESSFULLY COMPLETED

 *****TESTING isGameOver ***** 

 TESTING RETURN VALUE FOR GAME NOT OVER:

Return Value: 0, Expected: 0 


 TESTING FOR 0 PROVINCE CARD GAME OVER:

Return Value: 1, Expected: 1 


 TESTING FOR 1 SUPPLY COUNT 0:

Return Value: 0, Expected: 0 


 TESTING FOR 2 SUPPLY COUNT 0:

Return Value: 0, Expected: 0 


 TESTING FOR 3 SUPPLY COUNT 0:

Return Value: 1, Expected: 1 

TEST SUCCESSFULLY COMPLETED

 *****TESTING Adventurer***** 

 TESTING RETURN VALUE:

Return Value: 0, Expected: 0 


 TESTING CORRECT ACTION AND HAND COUNT

Action Count: 1, Expected: 1 

Hand Count: 9, Expected: 5 

Treasure Count: 9, Expected Treasure Count: >= 6 

TEST FAILED


 *****Adventurer TEST COMPLETE*****


 *****TESTING SMITHY***** 

 TESTING USAGE

USAGE TEST PASSED


 TESTING RETURN VALUE:

Return Value: 0, Expected: 0 


 TESTING CORRECT HAND COUNT

Hand Count: 8, Expected: 7 

TEST FAILED


 *****SMITHY TEST COMPLETE*****


 *****TESTING Great Hall***** 

 TESTING USAGE

USAGE TEST PASSED


 TESTING RETURN VALUE:

Return Value: 0, Expected: 0 


 TESTING CORRECT ACTION AND HAND COUNT

Action Count: 7, Expected: 5 

Hand Count: 5, Expected: 5 

TEST FAILED


 *****Great Hall TEST COMPLETE*****


 *****TESTING Steward***** 

 TESTING RETURN VALUE:

Return Value: 0, Expected: 0 


 TESTING CORRECT HAND COUNT AFTER DRAW 2 CARDS

Hand Count: 5, Expected: 5 


 TESTING CORRECT MONEY COUNT 

Money Count: 6, Expected: 6 


 TESTING DISCARD 

Hand Count: 4, Expected: 2 

TEST FAILED


 *****STEWARD TEST COMPLETE*****

File 'unittest1.c'
Lines executed:90.91% of 44
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://handCard() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =2, counter=0, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        4:   24:	int player = whoseTurn(&G);
        -:   25:	
        4:   26:	printf("\n *****TESTING handCard ***** \n");
        -:   27:	
        -:   28:	//testing return value
        4:   29:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   30:    for (i = 0; i < x; i++) {
     4000:   31:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   32:        val = handCard(counter, &oG);
     4000:   33:		player = whoseTurn(&oG);
     4000:   34:        if (val != G.hand[player][counter]) {
    #####:   35:            passFail = 0;
    #####:   36:            break;
        -:   37:        }
     4000:   38:		counter++;
     4000:   39:		if(counter > oG.handCount[0]){
      664:   40:			counter=0;
        -:   41:		}
        -:   42:    }
        4:   43:	printf("Return Value: %d, Expected: %d \n\n", val, 1);
        -:   44:	
        4:   45:	counter = 0;
        4:   46:	printf("TESTING CARD VALUES\n\n");
     4004:   47:	for (i = 0; i < x; i++) {
        -:   48:		
     4000:   49:        memcpy(&oG, &G, sizeof(struct gameState));
        -:   50:        //oG.whoseTurn = 0;
     4000:   51:		player = whoseTurn(&oG);
     4000:   52:        handCard(counter, &oG);
     4000:   53:        counter++;
     4000:   54:        if (counter > oG.handCount[0]) {
      664:   55:            counter = 0;
        -:   56:        }
        -:   57:    }
        4:   58:    x = G.handCount[0];
        4:   59:	int gValues[x], oGvalues[x];
       24:   60:    for (i = 0; i < x; i++ ) {
       20:   61:		oGvalues[i] = oG.hand[player][i];
       20:   62:		gValues[i] = G.hand[player][i];
        -:   63:	}
        4:   64:	printf("Original values     Copy Vaues\n");
       24:   65:	for(i = 0; i < x; i++ ){
       20:   66:		printf("     %d               %d\n",gValues[i], oGvalues[i]);
       20:   67:		if(gValues[i] != oGvalues[i]){
    #####:   68:			passFail = 0;
        -:   69:		}
        -:   70:	}
        -:   71:	
        4:   72:	assertTrue(passFail, 1);
        4:   73:	return 0;
        -:   74:}
File 'unittest2.c'
Lines executed:84.78% of 46
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://numHandCards() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =2, counter=0, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        4:   24:	int player = whoseTurn(&G);
        4:   25:	int correctNumb = G.handCount[player];
        4:   26:	printf("hand count %d\n", correctNumb);
        -:   27:	
        4:   28:	printf("\n *****TESTING numHandCard ***** \n");
        -:   29:	
        -:   30:	
        -:   31:	//testing return value
        4:   32:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   33:    for (i = 0; i < x; i++) {
     4000:   34:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   35:        val = numHandCards(&oG);
     4000:   36:		player = whoseTurn(&oG);
     4000:   37:        if (val != correctNumb) {
    #####:   38:            passFail = 0;
    #####:   39:            break;
        -:   40:        }
        -:   41:    }
        4:   42:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        -:   43:	//testing after adding
        4:   44:	printf(" TESTING AFTER ADDING CARD:\n\n");
        4:   45:	correctNumb = G.handCount[player]+1;
     4004:   46:	for (i = 0; i < x; i++) {
     4000:   47:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   48:        drawCard(player, &oG);
     4000:   49:		val = numHandCards(&oG);
     4000:   50:		player = whoseTurn(&oG);
     4000:   51:        if (val != correctNumb) {
    #####:   52:            passFail = 0;
    #####:   53:            break;
        -:   54:        }
        -:   55:    }
        4:   56:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        -:   57:	
        -:   58:	//testing after removing
        4:   59:	printf(" TESTING AFTER REMOVING CARD:\n\n");
        4:   60:	correctNumb = G.handCount[player]-1;
     4004:   61:	for (i = 0; i < x; i++) {
     4000:   62:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   63:        discardCard(1,player, &oG,0);
     4000:   64:		val = numHandCards(&oG);
     4000:   65:		player = whoseTurn(&oG);
     4000:   66:        if (val != correctNumb) {
    #####:   67:            passFail = 0;
    #####:   68:            break;
        -:   69:        }
        -:   70:    }
        4:   71:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        4:   72:	assertTrue(passFail, 1);
        4:   73:	return 0;
        -:   74:}
File 'unittest3.c'
Lines executed:90.91% of 33
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://shuffle() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =3, counter=0, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        4:   24:	int player = whoseTurn(&G);
        -:   25:	
        4:   26:	printf("\n *****TESTING shuffle() ***** \n");
        -:   27:	
        -:   28:	//testing return value
        4:   29:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   30:    for (i = 0; i < x; i++) {
     4000:   31:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   32:        val = shuffle(player, &oG);
     4000:   33:        if (val != 0) {
    #####:   34:            passFail = 0;
    #####:   35:            break;
        -:   36:        }
        -:   37:    }
        4:   38:	printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   39:	//testing suffle functionality
        4:   40:	printf("\n TESTING DECK IS SHUFFLED:\n\n");
        4:   41:	int oGvalues[G.deckCount[player]];
        4:   42:	int gValues[G.deckCount[player]];
        -:   43:	
        4:   44:	printf("VALUES BEFORE SHUFFLE:\n");
       24:   45:	for(i=0; i<G.deckCount[player]; i++){
       20:   46:		printf("%d\n",G.deck[player][i] );
       20:   47:		gValues[i] = G.deck[player][i];
        -:   48:	}
        -:   49:	
        4:   50:	printf("VALUES AFTER SHUFFLE:\n");
        4:   51:	shuffle(player, &G);
       24:   52:	for(i=0; i<G.deckCount[player]; i++){
       20:   53:		printf("%d\n",G.deck[player][i] );
       20:   54:		oGvalues[i] = G.deck[player][i];
        -:   55:	}
        -:   56:	if(gValues == oGvalues){
        -:   57:		passFail = 0;
        -:   58:	}
        4:   59:	assertTrue(passFail, 1);
        4:   60:	return 0;
        -:   61:}
File 'unittest4.c'
Lines executed:81.67% of 60
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://isGameOver() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int seed =3, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        -:   24:	
        -:   25:	
        4:   26:	printf("\n *****TESTING isGameOver ***** \n");
        -:   27:	
        -:   28:	//testing return value
        4:   29:    printf("\n TESTING RETURN VALUE FOR GAME NOT OVER:\n\n");
     4004:   30:    for (i = 0; i < x; i++) {
     4000:   31:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   32:        val = isGameOver(&oG);
     4000:   33:        if (val != 0) {
    #####:   34:            passFail = 0;
    #####:   35:            break;
        -:   36:        }
        -:   37:    }
        4:   38:	printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   39:	
        4:   40:	printf("\n TESTING FOR 0 PROVINCE CARD GAME OVER:\n\n");
     4004:   41:	for (i = 0; i < x; i++) {
     4000:   42:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   43:        oG.supplyCount[province]= 0;
     4000:   44:		val = isGameOver(&oG);
     4000:   45:        if (val == 0) {
    #####:   46:			passFail = 0;
    #####:   47:            break;
        -:   48:		}
        -:   49:	}
        4:   50:	oG.supplyCount[province]= 3;
        4:   51:	printf("Return Value: %d, Expected: %d \n\n", val, 1);
        4:   52:	printf("\n TESTING FOR 1 SUPPLY COUNT 0:\n\n");
        -:   53:	
     4004:   54:	for (i = 0; i < x; i++) {
     4000:   55:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   56:        oG.supplyCount[1]= 0;
     4000:   57:		val = isGameOver(&oG);
     4000:   58:		if (val == 1) {
    #####:   59:			passFail = 0;
    #####:   60:			break;
        -:   61:		}
        -:   62:	}
        4:   63:	printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   64:	
        4:   65:	printf("\n TESTING FOR 2 SUPPLY COUNT 0:\n\n");
     4004:   66:	for (i = 0; i < x; i++) {
     4000:   67:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   68:        oG.supplyCount[1]= 0;
     4000:   69:		oG.supplyCount[2] = 0;
     4000:   70:		val = isGameOver(&oG);
     4000:   71:		if (val == 1) {
    #####:   72:			passFail = 0;
    #####:   73:			break;
        -:   74:		}
        -:   75:	}
        4:   76:	printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   77:	
        4:   78:	printf("\n TESTING FOR 3 SUPPLY COUNT 0:\n\n");
        -:   79:	
     4004:   80:	for (i = 0; i < x; i++) {
     4000:   81:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   82:        oG.supplyCount[0]= 0;
     4000:   83:		oG.supplyCount[1] = 0;
     4000:   84:		oG.supplyCount[2]= 0;
     4000:   85:		val = isGameOver(&oG);
     4000:   86:		if (val == 0) {
    #####:   87:			passFail = 0;
    #####:   88:			break;
        -:   89:		}
        -:   90:	}
        4:   91:	printf("Return Value: %d, Expected: %d \n\n", val, 1);
        -:   92:	
        -:   93:	
        4:   94:	assertTrue(passFail, 1);
        -:   95:	
        4:   96:	return 0;
        -:   97:}
        -:   98:
File 'cardtest1.c'
Lines executed:77.05% of 61
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
    #####:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
        4:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17://Adventurer test
        4:   18:int main (int argc, char** argv) {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {great_hall, council_room, feast, gardens, mine
        -:   21:               , remodel, smithy, village, baron, adventurer};
        4:   22:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0, seed =2, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	int plusCards = 1, plusActions=1;
        4:   24:	int player = whoseTurn(&G);
        -:   25:
        -:   26:    //initialize game state
        4:   27:    initializeGame(numbPlayers, k, seed, &G);
        -:   28:
        4:   29:    printf("\n *****TESTING Adventurer***** \n");
        -:   30:	
        -:   31:	//testing return value for proper usage
        4:   32:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   33:    for (i = 0; i < x; i++) {
     4000:   34:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   35:        val = cardEffect(adventurer, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   36:        if (val != 0) {
    #####:   37:            passFail = 0;
    #####:   38:            break;
        -:   39:        }
        -:   40:    }
        4:   41:    printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   42:
        -:   43:    //testing correct number of cards  and actionsadded
        4:   44:    printf("\n TESTING CORRECT ACTION AND HAND COUNT\n\n");
        4:   45:    for (i = 0; i < x; i++) {
        4:   46:        memcpy(&oG, &G, sizeof(struct gameState));
        4:   47:        cardEffect(adventurer, choice1, choice2, choice3, &oG, handPos, &bonus);
        4:   48:        if (oG.handCount[player] != G.handCount[player]+plusCards-1){
        4:   49:            passFail = 0;
        4:   50:            break;
        -:   51:        }
    #####:   52:		if(oG.numActions != G.numActions){
    #####:   53:			passFail = 0;
    #####:   54:			break;
        -:   55:		}
        -:   56:    }
        4:   57:	printf("Action Count: %d, Expected: %d \n\n", oG.numActions, G.numActions);
        4:   58:    printf("Hand Count: %d, Expected: %d \n\n", oG.handCount[player], G.handCount[player]+plusCards-1);
        -:   59:	
        -:   60:	//testing treasure
        -:   61:	int treasure, tC;
     4004:   62:	for(i = 0; i<x; i++){
     4000:   63:		memcpy(&oG,&G, sizeof(struct gameState));
     4000:   64:		cardEffect(adventurer, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   65:		treasure = 0;
     4000:   66:		int j = 0;
        -:   67:		
    28000:   68:		while(j<numHandCards(&G)){
        -:   69:		//for (j = 0; j<numHandCards(&G; j++)
    20000:   70:			if(handCard(j, &G) == copper){
    16000:   71:				treasure ++;
        -:   72:			}
     4000:   73:			else if(handCard(j, &G)== silver){
    #####:   74:				treasure = treasure +2;
        -:   75:			}
     4000:   76:			else if(handCard(j, &G) == gold){
    #####:   77:				treasure = treasure+ 3;
        -:   78:			}
    20000:   79:			j++;
        -:   80:		};
        -:   81:		
     4000:   82:		tC = 0;
     4000:   83:		int k = 0;
    40000:   84:		for (k = 0; k<numHandCards(&oG); k++){
    36000:   85:			if (handCard(j, &oG) == copper) {
    36000:   86:                tC++;
    #####:   87:            } else if (handCard(j, &oG) == silver) {
    #####:   88:                tC += 2;
    #####:   89:            } else if (handCard(j, &oG) == gold) {
    #####:   90:                tC += 3;
        -:   91:            }
        -:   92:		}
     4000:   93:		if(treasure+2 > tC){
    #####:   94:			passFail = 0;
    #####:   95:			break;
        -:   96:		}
        -:   97:	}
        4:   98:	printf("Treasure Count: %d, Expected Treasure Count: >= %d \n\n", tC, treasure+2);
        -:   99:	
        -:  100:    //check value of passFail for overall pass or fail
        4:  101:	assertTrue(passFail, 1);
        4:  102:	printf("\n\n *****Adventurer TEST COMPLETE*****\n\n");
        -:  103:
        4:  104:    return 0;
        -:  105:};
File 'cardtest2.c'
Lines executed:92.68% of 41
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://Smithy test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
    #####:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
        4:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:    struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , remodel, great_hall, village, baron, smithy};
        4:   22:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0, seed =2, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	int plusCards = 3, plusActions;
        4:   24:	int player = whoseTurn(&G);
        -:   25:
        -:   26:    //initialize game state
        4:   27:    initializeGame(numbPlayers, k, seed, &G);
        -:   28:
        4:   29:    printf("\n *****TESTING SMITHY***** \n");
        -:   30:	
        4:   31:	printf("\n TESTING USAGE\n\n");
        -:   32:	//test invalid input
        4:   33:	int r = playSmithy(&G, -1, 4);
        4:   34:	if (r == 0){
        4:   35:		passFail = 1;
        -:   36:	}
        -:   37:
        -:   38:	//test valid input
        4:   39:	r = playSmithy( &G, 1, 4);
        4:   40:	if(r==0){
        4:   41:		passFail = 1;
        4:   42:		if(passFail == 1){
        4:   43:			printf("USAGE TEST PASSED\n\n");
        -:   44:		}
        -:   45:	}
        -:   46:	
        -:   47:	//testing return value
        4:   48:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   49:    for (i = 0; i < x; i++) {
     4000:   50:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   51:        val = cardEffect(smithy, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   52:        if (val != 0) {
    #####:   53:            passFail = 0;
    #####:   54:            break;
        -:   55:        }
        -:   56:    }
        4:   57:    printf("Return Value: %d, Expected: %d \n\n", val, 0);
        4:   58:	player = whoseTurn(&G);
        -:   59:    //testing correct number of cards added
        4:   60:    printf("\n TESTING CORRECT HAND COUNT\n\n");
        4:   61:    for (i = 0; i < x; i++) {
        4:   62:        memcpy(&oG, &G, sizeof(struct gameState));
        4:   63:        cardEffect(smithy, choice1, choice2, choice3, &oG, handPos, &bonus);
        4:   64:        if (oG.handCount[player] != G.handCount[player]+plusCards-1){
        4:   65:            passFail = 0;
        4:   66:            break;
        -:   67:        }
        -:   68:    }
        -:   69:
        4:   70:    printf("Hand Count: %d, Expected: %d \n\n", oG.handCount[player], G.handCount[player]+plusCards-1);
        -:   71:    //check value of passFail for overall pass or fail
        4:   72:	assertTrue(passFail, 1);
        4:   73:	printf("\n\n *****SMITHY TEST COMPLETE*****\n\n");
        -:   74:
        4:   75:    return 0;
        -:   76:};
File 'cardtest3.c'
Lines executed:88.64% of 44
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
    #####:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
        4:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17://greathall test
        4:   18:int main (int argc, char** argv) {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , remodel, smithy, village, baron, great_hall};
        4:   22:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0, seed =2, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	int plusCards = 1, plusActions=1;
        4:   24:	int player = whoseTurn(&G);
        -:   25:
        -:   26:    //initialize game state
        4:   27:    initializeGame(numbPlayers, k, seed, &G);
        -:   28:
        4:   29:    printf("\n *****TESTING Great Hall***** \n");
        -:   30:	
        4:   31:	printf("\n TESTING USAGE\n\n");
        -:   32:	//test invalid input
        4:   33:	int r = playGreat_hall(&G, -1, 4);
        4:   34:	if (r == 0){
        4:   35:		passFail = 1;
        -:   36:	}
        -:   37:
        -:   38:	//test valid input
        4:   39:	r = playGreat_hall( &G, 1, 4);
        4:   40:	if(r==0){
        4:   41:		passFail = 1;
        4:   42:		if(passFail == 1){
        4:   43:			printf("USAGE TEST PASSED\n\n");
        -:   44:		}
        -:   45:	}
        -:   46:	
        -:   47:	//testing return value
        4:   48:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   49:    for (i = 0; i < x; i++) {
     4000:   50:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   51:        val = cardEffect(great_hall, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   52:        if (val != 0) {
    #####:   53:            passFail = 0;
    #####:   54:            break;
        -:   55:        }
        -:   56:    }
        4:   57:    printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   58:
        -:   59:    //testing correct number of cards  and actionsadded
        4:   60:    printf("\n TESTING CORRECT ACTION AND HAND COUNT\n\n");
        4:   61:    for (i = 0; i < x; i++) {
        4:   62:        memcpy(&oG, &G, sizeof(struct gameState));
        4:   63:        cardEffect(great_hall, choice1, choice2, choice3, &oG, handPos, &bonus);
        4:   64:        if (oG.handCount[player] != G.handCount[player]+plusCards-1){
    #####:   65:            passFail = 0;
    #####:   66:            break;
        -:   67:        }
        4:   68:		if(oG.numActions != G.numActions){
        4:   69:			passFail = 0;
        4:   70:			break;
        -:   71:		}
        -:   72:    }
        4:   73:	printf("Action Count: %d, Expected: %d \n\n", oG.numActions, G.numActions);
        4:   74:    printf("Hand Count: %d, Expected: %d \n\n", oG.handCount[player], G.handCount[player]+plusCards-1);
        -:   75:    //check value of passFail for overall pass or fail
        4:   76:	assertTrue(passFail, 1);
        4:   77:	printf("\n\n *****Great Hall TEST COMPLETE*****\n\n");
        -:   78:
        4:   79:    return 0;
        -:   80:};
File 'cardtest4.c'
Lines executed:86.27% of 51
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://Steward test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
    #####:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
        4:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:    struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =2, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	int plusCards = 2, plusActions;
        4:   24:	int player = whoseTurn(&G);
        -:   25:
        -:   26:    //initialize game state
        4:   27:    initializeGame(numbPlayers, k, seed, &G);
        -:   28:
        4:   29:    printf("\n *****TESTING Steward***** \n");
        4:   30:	memcpy(&oG, &G, sizeof(struct gameState));
        -:   31:	//testing return value
        4:   32:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   33:    for (i = 0; i < x; i++) {
     4000:   34:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   35:        val = cardEffect(steward, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   36:        if (val != 0) {
    #####:   37:            passFail = 0;
    #####:   38:            break;
        -:   39:        }
        -:   40:    }
        4:   41:    printf("Return Value: %d, Expected: %d \n\n", val, 0);
        -:   42:	
        -:   43:    //testing correct number of cards added
        4:   44:    printf("\n TESTING CORRECT HAND COUNT AFTER DRAW 2 CARDS\n\n");
        -:   45:    int newCount;
     4004:   46:	for (i = 0; i < x; i++) {
     4000:   47:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   48:        cardEffect(steward, choice1, choice2, choice3, &oG, handPos, &bonus);
     4000:   49:        if (oG.handCount[player] != G.handCount[player]+1){
    #####:   50:            passFail = 0;
    #####:   51:            break;
        -:   52:        }
        -:   53:    }
        -:   54:	
        4:   55:	printf("Hand Count: %d, Expected: %d \n\n", oG.handCount[player]-1, G.handCount[player]);
        4:   56:	printf("\n TESTING CORRECT MONEY COUNT \n\n");
        4:   57:	player = whoseTurn(&G);
        -:   58:	
        4:   59:	oG.coins = G.coins; 
        -:   60:	
        4:   61:	choice1 = 1;
     4004:   62:	for (i = 0; i < x; i++) {
     4000:   63:        memcpy(&oG, &G, sizeof(struct gameState));
        -:   64:		//printf("Money Count: %d, Expected <: %d \n\n", oG.coins, G.coins);
     4000:   65:        cardEffect(steward, choice1, choice2, choice3, &oG, handPos, &bonus);
        -:   66:		//printf("Money Count: %d, Expected <: %d \n\n", oG.coins, G.coins);
        -:   67:		
     4000:   68:        if (oG.coins > G.coins +2){
    #####:   69:            passFail = 0;
    #####:   70:            break;
        -:   71:        }
        -:   72:    }
        -:   73:	
        4:   74:	printf("Money Count: %d, Expected: %d \n\n", oG.coins, G.coins+2);
        -:   75:	
        4:   76:	printf("\n TESTING DISCARD \n\n");
        -:   77:	
        4:   78:	for (i = 0; i < x; i++) {
        4:   79:        memcpy(&oG, &G, sizeof(struct gameState));
        4:   80:        cardEffect(steward, 2, choice2, choice3, &oG, handPos, &bonus);
        4:   81:        if (oG.handCount[player] != G.handCount[player]-2){
        4:   82:            passFail = 0;
        4:   83:            break;
        -:   84:        }
        -:   85:    }
        4:   86:	printf("Hand Count: %d, Expected: %d \n\n", oG.handCount[player], G.handCount[player]-3);
        -:   87:    //check value of passFail for overall pass or fail
        4:   88:	assertTrue(passFail, 1);
        4:   89:	printf("\n\n *****STEWARD TEST COMPLETE*****\n\n");
        -:   90:
        4:   91:    return 0;
        -:   92:};
File 'dominion.c'
Lines executed:35.36% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    26225:    8:int compare(const void* a, const void* b) {
    26225:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    26225:   11:  if (*(int*)a < *(int*)b)
    10330:   12:    return -1;
    15895:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       40:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       40:   44:  SelectStream(1);
       40:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       40:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       40:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      440:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     4400:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     4000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       40:   73:  if (numPlayers == 2)
        -:   74:    {
       40:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       40:   87:  if (numPlayers == 2)
        -:   88:    {
       40:   89:      state->supplyCount[estate] = 8;
       40:   90:      state->supplyCount[duchy] = 8;
       40:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       40:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       40:  102:  state->supplyCount[silver] = 40;
       40:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      840:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     6600:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     6200:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      400:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      160:  115:		  if (numPlayers == 2){ 
       80:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      320:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      400:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5800:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      120:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       80:  140:      state->deckCount[i] = 0;
      320:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      240:  143:	  state->deck[i][j] = estate;
      240:  144:	  state->deckCount[i]++;
        -:  145:	}
      640:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      560:  148:	  state->deck[i][j] = copper;
      560:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      120:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       80:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      120:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       80:  166:      state->handCount[i] = 0;
       80:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1120:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1080:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       40:  182:  state->outpostPlayed = 0;
       40:  183:  state->phase = 0;
       40:  184:  state->numActions = 1;
       40:  185:  state->numBuys = 1;
       40:  186:  state->playedCardCount = 0;
       40:  187:  state->whoseTurn = 0;
       40:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      240:  192:  for (it = 0; it < 5; it++){
      200:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       40:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       40:  198:  return 0;
        -:  199:}
        -:  200:
    15115:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15115:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15115:  209:  if (state->deckCount[player] < 1)
    10030:  210:    return -1;
     5085:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    35995:  214:  while (state->deckCount[player] > 0) {
    25825:  215:    card = floor(Random() * state->deckCount[player]);
    25825:  216:    newDeck[newDeckPos] = state->deck[player][card];
    25825:  217:    newDeckPos++;
    53160:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    27335:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    25825:  221:    state->deckCount[player]--;
        -:  222:  }
    30910:  223:  for (i = 0; i < newDeckPos; i++) {
    25825:  224:    state->deck[player][i] = newDeck[i];
    25825:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     5085:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    95000:  311:int numHandCards(struct gameState *state) {
    95000:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    90000:  315:int handCard(int handPos, struct gameState *state) {
    90000:  316:  int currentPlayer = whoseTurn(state);
    90000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
   245065:  346:int whoseTurn(struct gameState *state) {
   245065:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer =  (state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    25000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    25000:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     5000:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    20000:  401:  j = 0;
   520000:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   500000:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    30000:  406:	  j++;
        -:  407:	}
        -:  408:    }
    20000:  409:  if ( j >= 3)
        -:  410:    {
     5000:  411:      return 1;
        -:  412:    }
        -:  413:
    15000:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   135315:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   135315:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    10030:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    10030:  538:    state->deckCount[player] = state->discardCount[player];
    10030:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    10030:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    10030:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    10030:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    10030:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    10030:  559:    if (deckCounter == 0)
    10030:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   125285:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   125285:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   125285:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   125285:  576:    state->deckCount[player]--;
   125285:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   125285:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10005:  646:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
    40020:  647:	while(drawntreasure<2){
    20010:  648:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:	  shuffle(currentPlayer, state);
        -:  650:	}
    20010:  651:	drawCard(currentPlayer, state);
    20010:  652:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  653:	
    20010:  654:	if (cardDrawn == copper || cardDrawn == silver)//introduced bug to not count gold as a resource
    20010:  655:	  drawntreasure++;
        -:  656:	else{
    #####:  657:	  temphand[z]=cardDrawn;
    #####:  658:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:	  z++;
        -:  660:	}
        -:  661:      }
    20010:  662:      while(z-1>=0){
    #####:  663:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:	z=z-1;
        -:  665:      }
    10005:  666:	return 0;
        -:  667:}
        -:  668:
     5015:  669:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  670:	int i;
    25075:  671:	for (i = 0; i <= 3; i++) // changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  672:	{
    20060:  673:	  drawCard(currentPlayer, state);
        -:  674:	  
        -:  675:	}
        -:  676:      //discard card from hand
     5015:  677:      discardCard(handPos, currentPlayer, state, 0);
     5015:  678:	  return 0;
        -:  679:}
        -:  680:
     5015:  681:int playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  682:      //+1 Card
     5015:  683:      drawCard(currentPlayer, state);
        -:  684:			
        -:  685:      //+1 Actions
     5015:  686:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  687:			
        -:  688:      //discard card from hand
     5015:  689:      discardCard(handPos, currentPlayer, state, 0);
     5015:  690:	  return 0;
        -:  691:	 }
        -:  692:	 
    15005:  693:int playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    15005:  694:      if (choice1 == 1)
        -:  695:	{
        -:  696:	  //+2 cards
    15000:  697:	  drawCard(currentPlayer, state);
    15000:  698:	  drawCard(currentPlayer, state);
        -:  699:	}
        5:  700:      else if (choice1 > 1)  //changed == to >= so the else will never run
        -:  701:	{
        -:  702:	  //+2 coins
        5:  703:	  state->coins = state->coins + 2;
        -:  704:	}
        -:  705:      else
        -:  706:	{
        -:  707:	  //trash 2 cards in hand
    #####:  708:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  709:	  discardCard(choice3, currentPlayer, state, 1);
        -:  710:	}
        -:  711:			
        -:  712:      //discard card from hand
    15005:  713:      discardCard(handPos, currentPlayer, state, 0);
    15005:  714:	  return 0;
        -:  715:    }
        -:  716:
    #####:  717:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  718:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  719:	int i;
    #####:  720:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  721:	{
    #####:  722:	  return -1;
        -:  723:	}
        -:  724:		
    #####:  725:      if (choice2 > treasure_map || choice2 < curse)
        -:  726:	{
    #####:  727:	  return -1;
        -:  728:	}
        -:  729:
    #####:  730:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  731:	{
    #####:  732:	  return -1;
        -:  733:	}
        -:  734:
    #####:  735:      gainCard(choice2, state, 2, currentPlayer);
        -:  736:
        -:  737:      //discard card from hand
    #####:  738:      discardCard(handPos, currentPlayer, state, 0);
        -:  739:
        -:  740:      //discard trashed card
    #####:  741:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  742:	{
    #####:  743:	  if (state->hand[currentPlayer][i] == j)
        -:  744:	    {
    #####:  745:	      discardCard(i, currentPlayer, state, 0);			
    #####:  746:	      return 0;
        -:  747:	    }
        -:  748:	}
        -:  749:			
    #####:  750:      return 0;
        -:  751:}
        -:  752:
        -:  753:
    35020:  754:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  755:{
        -:  756:  int i;
        -:  757:  int j;
        -:  758:  int k;
        -:  759:  int x;
        -:  760:  int index;
    35020:  761:  int currentPlayer = whoseTurn(state);
    35020:  762:  int nextPlayer = currentPlayer + 1;
        -:  763:
    35020:  764:  int tributeRevealedCards[2] = {-1, -1};
        -:  765:  int temphand[MAX_HAND];// moved above the if statement
    35020:  766:  int drawntreasure=0;
        -:  767:  int cardDrawn;
    35020:  768:  int z = 0;// this is the counter for the temp hand
    35020:  769:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  770:    nextPlayer = 0;
        -:  771:  }
        -:  772:  
        -:  773:	
        -:  774:  //uses switch to select card and perform actions
    35020:  775:  switch( card ) 
        -:  776:    {
        -:  777:    case adventurer:
    10005:  778:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z ); 
        -:  779:		
        -:  780:    case council_room:
        -:  781:      //+4 Cards
    50025:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
    40020:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
    10005:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
    30015:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
    20010:  793:	  if ( i != currentPlayer )
        -:  794:	    {
    10005:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
    10005:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
    10005:  802:      return 0;
        -:  803:			
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  808:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
    #####:  817:	if (supplyCount(choice1, state) <= 0){
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
    #####:  826:	  printf("That card is too expensive!\n");
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 0, currentPlayer);
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:
        -:  887:
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case smithy:
     5005:  891:		playSmithy(state, currentPlayer, handPos);
        -:  892:		
        -:  893:    case village:
        -:  894:      //+1 Card
     5005:  895:      drawCard(currentPlayer, state);
        -:  896:			
        -:  897:      //+2 Actions
     5005:  898:      state->numActions = state->numActions + 2;
        -:  899:			
        -:  900:      //discard played card from hand
     5005:  901:      discardCard(handPos, currentPlayer, state, 0);
     5005:  902:      return 0;
        -:  903:		
        -:  904:    case baron:
    #####:  905:      state->numBuys++;//Increase buys by 1!
    #####:  906:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  907:	int p = 0;//Iterator for hand!
    #####:  908:	int card_not_discarded = 1;//Flag for discard set!
    #####:  909:	while(card_not_discarded){
    #####:  910:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  911:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  912:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  913:	    state->discardCount[currentPlayer]++;
    #####:  914:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  915:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  916:	    }
    #####:  917:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  918:	    state->handCount[currentPlayer]--;
    #####:  919:	    card_not_discarded = 0;//Exit the loop
        -:  920:	  }
    #####:  921:	  else if (p > state->handCount[currentPlayer]){
        -:  922:	    if(DEBUG) {
        -:  923:	      printf("No estate cards in your hand, invalid choice\n");
        -:  924:	      printf("Must gain an estate if there are any\n");
        -:  925:	    }
    #####:  926:	    if (supplyCount(estate, state) > 0){
    #####:  927:	      gainCard(estate, state, 0, currentPlayer);
    #####:  928:	      state->supplyCount[estate]--;//Decrement estates
    #####:  929:	      if (supplyCount(estate, state) == 0){
    #####:  930:		isGameOver(state);
        -:  931:	      }
        -:  932:	    }
    #####:  933:	    card_not_discarded = 0;//Exit the loop
        -:  934:	  }
        -:  935:			    
        -:  936:	  else{
    #####:  937:	    p++;//Next card
        -:  938:	  }
        -:  939:	}
        -:  940:      }
        -:  941:			    
        -:  942:      else{
    #####:  943:	if (supplyCount(estate, state) > 0){
    #####:  944:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  945:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  946:	  if (supplyCount(estate, state) == 0){
    #####:  947:	    isGameOver(state);
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:	    
        -:  952:      
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case great_hall:
     5005:  956:		playGreat_hall(state, currentPlayer, handPos);
     5005:  957:      return 0;
        -:  958:		
        -:  959:    case minion:
        -:  960:      //+1 action
    #####:  961:      state->numActions++;
        -:  962:			
        -:  963:      //discard card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
        -:  965:			
    #####:  966:      if (choice1)		//+2 coins
        -:  967:	{
    #####:  968:	  state->coins = state->coins + 2;
        -:  969:	}
        -:  970:			
    #####:  971:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  972:	{
        -:  973:	  //discard hand
    #####:  974:	  while(numHandCards(state) > 0)
        -:  975:	    {
    #####:  976:	      discardCard(handPos, currentPlayer, state, 0);
        -:  977:	    }
        -:  978:				
        -:  979:	  //draw 4
    #####:  980:	  for (i = 0; i < 4; i++)
        -:  981:	    {
    #####:  982:	      drawCard(currentPlayer, state);
        -:  983:	    }
        -:  984:				
        -:  985:	  //other players discard hand and redraw if hand size > 4
    #####:  986:	  for (i = 0; i < state->numPlayers; i++)
        -:  987:	    {
    #####:  988:	      if (i != currentPlayer)
        -:  989:		{
    #####:  990:		  if ( state->handCount[i] > 4 )
        -:  991:		    {
        -:  992:		      //discard hand
    #####:  993:		      while( state->handCount[i] > 0 )
        -:  994:			{
    #####:  995:			  discardCard(handPos, i, state, 0);
        -:  996:			}
        -:  997:							
        -:  998:		      //draw 4
    #####:  999:		      for (j = 0; j < 4; j++)
        -: 1000:			{
    #####: 1001:			  drawCard(i, state);
        -: 1002:			}
        -: 1003:		    }
        -: 1004:		}
        -: 1005:	    }
        -: 1006:				
        -: 1007:	}
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case steward:
    15005: 1011:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
        -: 1012:		
        -: 1013:    case tribute:
    15005: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:	if (state->deckCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:	  state->deckCount[nextPlayer]--;
        -: 1018:	}
    #####: 1019:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:	  state->discardCount[nextPlayer]--;
        -: 1022:	}
        -: 1023:	else{
        -: 1024:	  //No Card to Reveal
        -: 1025:	  if (DEBUG){
        -: 1026:	    printf("No cards to reveal\n");
        -: 1027:	  }
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
        -: 1031:      else{
    15005: 1032:	if (state->deckCount[nextPlayer] == 0){
    #####: 1033:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:	    state->deckCount[nextPlayer]++;
    #####: 1036:	    state->discard[nextPlayer][i] = -1;
    #####: 1037:	    state->discardCount[nextPlayer]--;
        -: 1038:	  }
        -: 1039:			    
    #####: 1040:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1041:	} 
    15005: 1042:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    15005: 1043:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    15005: 1044:	state->deckCount[nextPlayer]--;
    15005: 1045:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    15005: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    15005: 1047:	state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:		       
    15005: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    15005: 1051:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    15005: 1052:	state->playedCardCount++;
    15005: 1053:	tributeRevealedCards[1] = -1;
        -: 1054:      }
        -: 1055:
    60020: 1056:      for (i = 0; i <= 2; i ++){
    45015: 1057:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    15005: 1058:	  state->coins += 2;
        -: 1059:	}
        -: 1060:		    
    30010: 1061:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:	  drawCard(currentPlayer, state);
    #####: 1063:	  drawCard(currentPlayer, state);
        -: 1064:	}
        -: 1065:	else{//Action Card
    30010: 1066:	  state->numActions = state->numActions + 2;
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
    15005: 1070:      return 0;
        -: 1071:		
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;		//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:	{
    #####: 1087:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:	    {
    #####: 1089:	      j++;
        -: 1090:	    }
        -: 1091:	}
    #####: 1092:      if (j < choice2)
        -: 1093:	{
    #####: 1094:	  return -1;				
        -: 1095:	}
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:			
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:	{
    #####: 1106:	  if (i != currentPlayer)
        -: 1107:	    {
    #####: 1108:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:	{
    #####: 1118:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	    {
    #####: 1120:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:		{
    #####: 1122:		  discardCard(i, currentPlayer, state, 1);
    #####: 1123:		  break;
        -: 1124:		}
        -: 1125:	    }
        -: 1126:	}			
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
        -: 1136:	    {
    #####: 1137:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1138:		{
    #####: 1139:		  if (state->hand[i][j] == copper)
        -: 1140:		    {
    #####: 1141:		      discardCard(j, i, state, 0);
    #####: 1142:		      break;
        -: 1143:		    }
    #####: 1144:		  if (j == state->handCount[i])
        -: 1145:		    {
    #####: 1146:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1147:			{
        -: 1148:			  if (DEBUG)
        -: 1149:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1150:			}	
    #####: 1151:		      break;
        -: 1152:		    }		
        -: 1153:		}
        -: 1154:					
        -: 1155:	    }
        -: 1156:				
        -: 1157:	}				
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:		
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:			
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:	{
    #####: 1172:	  return -1;
        -: 1173:	}
        -: 1174:			
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:			
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:			
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:			
    #####: 1194:      if (choice1)
        -: 1195:	{
        -: 1196:	  //gain coins equal to trashed card
    #####: 1197:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:	  //trash card
    #####: 1199:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:	}
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:	if (i != currentPlayer){
    #####: 1209:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:	  state->discardCount[i]++;
    #####: 1211:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:	}
        -: 1213:      }
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:	{
    #####: 1221:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:	    {
    #####: 1223:	      index = i;
    #####: 1224:	      break;
        -: 1225:	    }
        -: 1226:	}
    #####: 1227:      if (index > -1)
        -: 1228:	{
        -: 1229:	  //trash both treasure cards
    #####: 1230:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:	  discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:	  //gain 4 Gold cards
    #####: 1234:	  for (i = 0; i < 4; i++)
        -: 1235:	    {
    #####: 1236:	      gainCard(gold, state, 1, currentPlayer);
        -: 1237:	    }
        -: 1238:				
        -: 1239:	  //return success
    #####: 1240:	  return 1;
        -: 1241:	}
        -: 1242:			
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:	
    #####: 1247:  return -1;
        -: 1248:}
        -: 1249:
    45045: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:	
        -: 1253:  //if card is not trashed, added to Played pile 
    45045: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
    45045: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    45045: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
    45045: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
    45045: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
    45045: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
        5: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
    45040: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
    45040: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
    45040: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
    45045: 1285:  return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
       40: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
       40: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      240: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
      200: 1335:      if (state->hand[player][i] == copper)
        -: 1336:	{
      150: 1337:	  state->coins += 1;
        -: 1338:	}
       50: 1339:      else if (state->hand[player][i] == silver)
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
       50: 1343:      else if (state->hand[player][i] == gold)
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
       40: 1350:  state->coins += bonus;
        -: 1351:
       40: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
