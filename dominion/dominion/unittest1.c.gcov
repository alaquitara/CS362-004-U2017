        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://handCard() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST PASSED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =2, counter=0, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        4:   24:	int player = whoseTurn(&G);
        -:   25:	
        4:   26:	printf("\n *****TESTING handCard ***** \n");
        -:   27:	
        -:   28:	//testing return value
        4:   29:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   30:    for (i = 0; i < x; i++) {
     4000:   31:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   32:        val = handCard(counter, &oG);
     4000:   33:		player = whoseTurn(&oG);
     4000:   34:        if (val != G.hand[player][counter]) {
    #####:   35:            passFail = 0;
    #####:   36:            break;
        -:   37:        }
     4000:   38:		counter++;
     4000:   39:		if(counter > oG.handCount[0]){
      664:   40:			counter=0;
        -:   41:		}
        -:   42:    }
        4:   43:	printf("Return Value: %d, Expected: %d \n\n", val, 1);
        -:   44:	
        4:   45:	counter = 0;
        4:   46:	printf("TESTING CARD VALUES\n\n");
     4004:   47:	for (i = 0; i < x; i++) {
        -:   48:		
     4000:   49:        memcpy(&oG, &G, sizeof(struct gameState));
        -:   50:        //oG.whoseTurn = 0;
     4000:   51:		player = whoseTurn(&oG);
     4000:   52:        handCard(counter, &oG);
     4000:   53:        counter++;
     4000:   54:        if (counter > oG.handCount[0]) {
      664:   55:            counter = 0;
        -:   56:        }
        -:   57:    }
        4:   58:    x = G.handCount[0];
        4:   59:	int gValues[x], oGvalues[x];
       24:   60:    for (i = 0; i < x; i++ ) {
       20:   61:		oGvalues[i] = oG.hand[player][i];
       20:   62:		gValues[i] = G.hand[player][i];
        -:   63:	}
        4:   64:	printf("Original values     Copy Vaues\n");
       24:   65:	for(i = 0; i < x; i++ ){
       20:   66:		printf("     %d               %d\n",gValues[i], oGvalues[i]);
       20:   67:		if(gValues[i] != oGvalues[i]){
    #####:   68:			passFail = 0;
        -:   69:		}
        -:   70:	}
        -:   71:	
        4:   72:	assertTrue(passFail, 1);
        4:   73:	return 0;
        -:   74:}
