        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
function main called 4 returned 100% blocks executed 78%
        4:   10:int main(){
        -:   11:	struct gameState G, oG;
        -:   12:	
        4:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   14:               , remodel, great_hall, village, baron, smithy};
        4:   15:    int  bonus = 0,  i, handCount, handPos=0, deckCount, pass=0, fail =0, sw ;
        -:   16:	
        4:   17:	 printf("\n *****RANDOM TESTING SMITHY***** \n");
call    0 returned 100%
        -:   18:	
    40004:   19:	for(i = 0; i < 10000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   20:		
    40000:   21:		int choice1 = rand() % 3 +1;
call    0 returned 100%
    40000:   22:		int choice2 = rand() % 3 + 1;
call    0 returned 100%
    40000:   23:		int choice3 = rand() % 3 +1;
call    0 returned 100%
    40000:   24:		int numbPlayers = rand() % 4 +1;
call    0 returned 100%
    40000:   25:		unsigned int seed = rand();
call    0 returned 100%
    40000:   26:		int player = rand() % numbPlayers + 1;
call    0 returned 100%
    40000:   27:		initializeGame(numbPlayers, k, seed, &G);
call    0 returned 100%
        -:   28:			
    40000:   29:		int rando = rand() %4;
call    0 returned 100%
    40000:   30:		if(rando == 3){ // 1 in 5 chance that the deck is empty
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
     9992:   31:			G.deckCount[player] = 0;
     9992:   32:			deckCount = 0;
        -:   33:		}else{
    30008:   34:			deckCount = rand() % MAX_DECK;
call    0 returned 100%
    30008:   35:			G.deckCount[player] = deckCount;
        -:   36:		}
        -:   37:			
    40000:   38:		handCount = rand() % MAX_HAND;
call    0 returned 100%
    40000:   39:		G.handCount[player] = handCount;
    40000:   40:		G.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
    40000:   41:		memcpy(&oG, &G, sizeof(struct gameState));
    40000:   42:		int r = cardEffect(smithy, choice1, choice2, choice3, &oG, handPos, &bonus);
call    0 returned 100%
        -:   43:			
        -:   44:		//test for correct number of cards added
    40000:   45:		if (oG.handCount[player] != G.handCount[player]+2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    40000:   46:			fail++;
    40000:   47:			sw =1;
        -:   48:		}
        -:   49:		else{
    #####:   50:			pass++;
        -:   51:		}
        -:   52:		//test return value
    40000:   53:		if(r == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    40000:   54:			pass++;
        -:   55:		}else{
    #####:   56:			fail++;
    #####:   57:			sw = 2;
        -:   58:		}
        -:   59:		
    40000:   60:		switch(sw){
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
        -:   61:			case 1:
    40000:   62:				printf("Test for number of cards added failed\n");
call    0 returned 100%
    40000:   63:				break;
        -:   64:			case 2:
    #####:   65:				printf("Test for return value failed\n");
call    0 never executed
    #####:   66:				break;
        -:   67:			default:
    #####:   68:				printf("All tests passed\n");
call    0 never executed
    #####:   69:				break;
        -:   70:		}
        -:   71:	}
        -:   72:	
        4:   73:	if(fail == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("Test Passed\n");
call    0 never executed
    #####:   75:		printf("\n\n *****SMITHY TEST COMPLETE*****\n\n");
call    0 never executed
    #####:   76:		return 0;
        -:   77:	}else{
        4:   78:		printf("Test Failed\n");
call    0 returned 100%
        4:   79:		printf("\n\n *****SMITHY TEST COMPLETE*****\n\n");
call    0 returned 100%
        4:   80:		return 1;
        -:   81:	}
        -:   82:	
        -:   83:	
        -:   84:}
