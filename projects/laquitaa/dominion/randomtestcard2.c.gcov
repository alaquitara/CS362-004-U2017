        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 84%
        1:   10:int main(){
        -:   11:	struct gameState G, oG;
        -:   12:	
        1:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   14:               , remodel, steward, village, baron, smithy};
        1:   15:    int  bonus = 0,  i, handCount, handPos=0, deckCount, pass=0, fail =0, sw ;
        -:   16:	
        1:   17:	 printf("\n *****RANDOM TESTING STEWARD***** \n");
call    0 returned 100%
        -:   18:	
    10001:   19:	for(i = 0; i < 10000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   20:		
    10000:   21:		int choice1 = rand() % 3 +1;
call    0 returned 100%
    10000:   22:		int choice2 = rand() % 3 + 1;
call    0 returned 100%
    10000:   23:		int choice3 = rand() % 3 +1;
call    0 returned 100%
    10000:   24:		int numbPlayers = rand() % 4 +1;
call    0 returned 100%
    10000:   25:		unsigned int seed = rand();
call    0 returned 100%
    10000:   26:		int player = rand() % numbPlayers + 1;
call    0 returned 100%
    10000:   27:		initializeGame(numbPlayers, k, seed, &G);
call    0 returned 100%
        -:   28:			
    10000:   29:		int rando = rand() %4;
call    0 returned 100%
    10000:   30:		if(rando == 3){ // 1 in 5 chance that the deck is empty
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
     2498:   31:			G.deckCount[player] = 0;
     2498:   32:			deckCount = 0;
        -:   33:		}else{
     7502:   34:			deckCount = rand() % MAX_DECK;
call    0 returned 100%
     7502:   35:			G.deckCount[player] = deckCount;
        -:   36:		}
        -:   37:			
    10000:   38:		handCount = rand() % MAX_HAND;
call    0 returned 100%
    10000:   39:		G.handCount[player] = handCount;
    10000:   40:		G.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
    10000:   41:		memcpy(&oG, &G, sizeof(struct gameState));
    10000:   42:        int r = cardEffect(steward, choice1, choice2, choice3, &oG, handPos, &bonus);
call    0 returned 100%
        -:   43:        
        -:   44:		//testing for correct number of cards added
    10000:   45:		if ((choice1 == 1) && (oG.handCount[player] != G.handCount[player]+1)){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     3335:   46:            fail++;
     3335:   47:			sw= 1;
     3335:   48:        }
call    0 returned 100%
        -:   49:		//testing for correct number of actions
        -:   50:		if((choice1 == 2) && (oG.numActions != G.numActions)){
    10000:   51:			fail++;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
     2539:   52:			sw = 2;
     2539:   53:		}
        -:   54:		
        -:   55:		//testing discard
        -:   56:		if((choice1 > 2) && (oG.handCount[player] != G.handCount[player]-2)){
    10000:   57:			fail++;
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     3370:   58:			sw=3;
     3370:   59:		}
        -:   60:		//testing return value
        -:   61:		if(r == 0){
    10000:   62:			pass++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:   63:		}else{
        -:   64:			fail++;
    #####:   65:			sw=4;
    #####:   66:		}
        -:   67:	
        -:   68:		switch(sw){
    10000:   69:			case 1:
branch  0 taken 36%
branch  1 taken 28%
branch  2 taken 36%
branch  3 taken 0%
branch  4 taken 0%
        -:   70:				printf("Test for number of cards added failed\n");
     3596:   71:				break;
call    0 returned 100%
     3596:   72:			case 2:
        -:   73:				printf("Test for number of actions failed\n");
     2757:   74:				break;
call    0 returned 100%
     2757:   75:			case 3:
        -:   76:				printf("Test for number of cards discarded failed\n");
     3647:   77:				break;
call    0 returned 100%
     3647:   78:			case 4:
        -:   79:				printf("Test for correct return value failed\n");
    #####:   80:				break;
call    0 never executed
    #####:   81:			default:
        -:   82:				printf("All tests passed\n");
    #####:   83:				break;
call    0 never executed
    #####:   84:		}
        -:   85:	}
        -:   86:	if(fail == 0){
        1:   87:		printf("Test Passed\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:		printf("\n\n *****STEWARD TEST COMPLETE*****\n\n");
call    0 never executed
    #####:   89:		return 0;
call    0 never executed
    #####:   90:	}else{
        -:   91:		printf("Test Failed\n");
        1:   92:		printf("\n\n *****STEWARD TEST COMPLETE*****\n\n");
call    0 returned 100%
        1:   93:		return 1;
call    0 returned 100%
        1:   94:	}
        -:   95:	
        -:   96:	
        -:   97:}
