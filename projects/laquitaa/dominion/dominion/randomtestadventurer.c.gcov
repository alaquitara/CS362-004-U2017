        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
function main called 3 returned 100% blocks executed 79%
        3:   10:int main(){
        -:   11:	struct gameState G, oG;
        -:   12:	
        3:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   14:               , remodel, great_hall, village, baron, smithy};
        3:   15:    int  bonus = 0,  i, handCount, handPos=0, deckCount, pass=0, fail =0, plusCards = 1 ;
        -:   16:	
        3:   17:	 printf("\n *****RANDOM TESTING ADVENTURER***** \n");
call    0 returned 100%
        -:   18:	
    30003:   19:	for(i = 0; i < 10000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   20:		
    30000:   21:		int choice1 = rand() % 3 +1;
call    0 returned 100%
    30000:   22:		int choice2 = rand() % 3 + 1;
call    0 returned 100%
    30000:   23:		int choice3 = rand() % 3 +1;
call    0 returned 100%
    30000:   24:		int numbPlayers = rand() % 4 +1;
call    0 returned 100%
    30000:   25:		unsigned int seed = rand();
call    0 returned 100%
    30000:   26:		int player = rand() % numbPlayers + 1;
call    0 returned 100%
    30000:   27:		initializeGame(numbPlayers, k, seed, &G);
call    0 returned 100%
        -:   28:			
    30000:   29:		int rando = rand() %4;
call    0 returned 100%
    30000:   30:		if(rando == 3){ // 1 in 5 chance that the deck is empty
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
     7494:   31:			G.deckCount[player] = 0;
     7494:   32:			deckCount = 0;
        -:   33:		}else{
    22506:   34:			deckCount = rand() % MAX_DECK;
call    0 returned 100%
    22506:   35:			G.deckCount[player] = deckCount;
        -:   36:		}
        -:   37:			
    30000:   38:		handCount = rand() % MAX_HAND;
call    0 returned 100%
    30000:   39:		G.handCount[player] = handCount;
    30000:   40:		G.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
    30000:   41:		memcpy(&oG, &G, sizeof(struct gameState));
    30000:   42:        int r = cardEffect(adventurer, choice1, choice2, choice3, &oG, handPos, &bonus);
call    0 returned 100%
        -:   43:        
        -:   44:		//testing for correct hand count
    30000:   45:		if (oG.handCount[player] < G.handCount[player]+plusCards-1){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     1026:   46:            fail++;
        -:   47:        }
        -:   48:		//testing for correct number of actions
    30000:   49:		if(oG.numActions != G.numActions){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   50:			fail++;
        -:   51:		}
        -:   52:		
        -:   53:		//testing correct treasure added
    30000:   54:		int treasure = 0;
    30000:   55:		int j = 0;
        -:   56:		
   210000:   57:		while(j<numHandCards(&G)){
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 17% (fallthrough)
   150000:   58:			if(handCard(j, &G) == copper){
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
   105387:   59:				treasure ++;
        -:   60:			}
    44613:   61:			else if(handCard(j, &G)== silver){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   62:				treasure = treasure +2;
        -:   63:			}
    44613:   64:			else if(handCard(j, &G) == gold){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   65:				treasure = treasure+ 3;
        -:   66:			}
   150000:   67:			j++;
        -:   68:		};
        -:   69:		
    30000:   70:		int tC = 0;
    30000:   71:		int k = 0;
   300000:   72:		for (k = 0; k<numHandCards(&oG); k++){
call    0 returned 100%
branch  1 taken 90%
branch  2 taken 10% (fallthrough)
   270000:   73:			if (handCard(j, &oG) == copper) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
   270000:   74:                tC++;
    #####:   75:            } else if (handCard(j, &oG) == silver) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:                tC += 2;
    #####:   77:            } else if (handCard(j, &oG) == gold) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:                tC += 3;
        -:   79:            }
        -:   80:		}
    30000:   81:		if(treasure+2 > tC){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   82:			fail++;
        -:   83:		}
        -:   84:		//test return value
    30000:   85:		if(r == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    30000:   86:			pass++;
        -:   87:		}else{
    #####:   88:			fail++;
        -:   89:		}
        -:   90:	}
        -:   91:	
        3:   92:	printf("\n\n *****ADVENTURER TEST COMPLETE*****\n\n");
call    0 returned 100%
        -:   93:	//printf("pass#:  %d, fail#: %d\n", pass, fail);
        3:   94:	if(fail == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   95:		printf("Test Passed\n");
call    0 never executed
    #####:   96:		return 0;
        -:   97:	}else{
        3:   98:		printf("Test Failed\n");
call    0 returned 100%
        3:   99:		return 1;
        -:  100:	}
        -:  101:	
        -:  102:	
        -:  103:}
