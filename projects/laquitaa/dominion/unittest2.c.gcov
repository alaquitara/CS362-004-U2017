        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6://numHandCards() test
        -:    7:
        4:    8:void assertTrue(int a, int b){
        4:    9:	if(a==b)
        -:   10:	{
        4:   11:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   12:	}
        -:   13:	else{
    #####:   14:		printf("TEST FAILED\n");
        -:   15:	}
        4:   16:}
        -:   17:
        4:   18:int main() {
        -:   19:	struct gameState G, oG;
        4:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , smithy, great_hall, village, baron, steward};
        4:   22:    int choice1 = 1, choice2 = 2, choice3 = 3, bonus = 0, handPos = 0, seed =2, counter=0, numbPlayers = 2, x = 1000, i, val, passFail = 1;
        4:   23:	initializeGame(numbPlayers, k, seed, &G);
        4:   24:	int player = whoseTurn(&G);
        4:   25:	int correctNumb = G.handCount[player];
        4:   26:	printf("hand count %d\n", correctNumb);
        -:   27:	
        4:   28:	printf("\n *****TESTING numHandCard ***** \n");
        -:   29:	
        -:   30:	
        -:   31:	//testing return value
        4:   32:    printf("\n TESTING RETURN VALUE:\n\n");
     4004:   33:    for (i = 0; i < x; i++) {
     4000:   34:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   35:        val = numHandCards(&oG);
     4000:   36:		player = whoseTurn(&oG);
     4000:   37:        if (val != correctNumb) {
    #####:   38:            passFail = 0;
    #####:   39:            break;
        -:   40:        }
        -:   41:    }
        4:   42:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        -:   43:	//testing after adding
        4:   44:	printf(" TESTING AFTER ADDING CARD:\n\n");
        4:   45:	correctNumb = G.handCount[player]+1;
     4004:   46:	for (i = 0; i < x; i++) {
     4000:   47:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   48:        drawCard(player, &oG);
     4000:   49:		val = numHandCards(&oG);
     4000:   50:		player = whoseTurn(&oG);
     4000:   51:        if (val != correctNumb) {
    #####:   52:            passFail = 0;
    #####:   53:            break;
        -:   54:        }
        -:   55:    }
        4:   56:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        -:   57:	
        -:   58:	//testing after removing
        4:   59:	printf(" TESTING AFTER REMOVING CARD:\n\n");
        4:   60:	correctNumb = G.handCount[player]-1;
     4004:   61:	for (i = 0; i < x; i++) {
     4000:   62:        memcpy(&oG, &G, sizeof(struct gameState));
     4000:   63:        discardCard(1,player, &oG,0);
     4000:   64:		val = numHandCards(&oG);
     4000:   65:		player = whoseTurn(&oG);
     4000:   66:        if (val != correctNumb) {
    #####:   67:            passFail = 0;
    #####:   68:            break;
        -:   69:        }
        -:   70:    }
        4:   71:	printf("Return Value: %d, Expected: %d \n\n", val, correctNumb);
        4:   72:	assertTrue(passFail, 1);
        4:   73:	return 0;
        -:   74:}
